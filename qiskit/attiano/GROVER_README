# Grover
grover is an object that contains all the relevant methods for Grover's algorithim as member functions

Simple-use case example:

>>> from grover import grover
>>> g = grover()
>>> result, compute_time, numerical_prob, theoretical_prob = g.run_grover(f,n,a)

NOTE: Oracle function is input in the form of a numpy array with 2^n indicies, and each index 'x' either evaluates to 1/0 e.g f[x]= 1 or f[x]=0

Advanced use:

To run grover.execute_grover(circuit,n,f,num_shots=1000,backend='qasm_simulator') you need to input the corresponding circuit definition from grover.create_circuit(G,n,a) which itself needs the G Qiskit gate object built from the numpy matrix that grover.create_G(f,n) returns. This requires as input: f, the oracle function, n, the number of qubits, and a, the number of inputs that evaluate to 1. grover.execute_grover() then returns the bit string |x> that corresponds to an input x that evaluates 1, the run time of 1000 shots, and the numerical probability of success.
	(This can be proven by the proof of grovers algorithm that applying G = -(H^n)zo(H^n)zf k times where k is proportional to the sqrt(2^n) sets the state of the qubits to match x with overwhelming probability.)
	
	>> from qiskit.quantum_info.operators import Operator
	>> from grover import grover
		Import the relevant packages
	>> G_matrix = grover.create_G(f,n)
		Creates the unitary matrix G for n qubits.
	>> G = Operator(G_matrix)
		Create a qiskit gate object using G_matrix
	>> G_circuit = grover.create_circuit(G,n,a)
		Creates qikit circuit object using the G qiskit gate object
	>> result, computation_time, numerical_prob = grover.execute_grover(circuit,n,f,num_shots=1000,backend='qasm_simulator')
		Pass grover's circuit for your oracle function, and the value of n in order to execute the grover circuit. The function will return ket{x}, the execution time of the quantum circuit, and the numerical probability of success over num_shots.
			
To test correctness you can pass in the oracle function and the result of Grovers algorithm to check_correctness.
	>> Correct = g.check_correctness(func,result,n)
	
If you run "python grover.py" the command line as the main argument to the python interpreter it runs exhaustive testing for n=1-6 qubits, with the results averaged over 1000 trials, for a randomly chosen f with a=1->3 (the number of inputs to f(X) that equal 1 -> |x| s.t. f(x)=1 )

	>> $python grover.py

grover.py contains the following set of member functions in the grover object:
	
	Run_grover: can be used to run grover with an arbitrary oracle function f, returns the result ket{x}, the run-time, the numerical and theoretical probability of success 
	Check_correctness: checks to make sure the f(x)=1 for the x output from Grover's algorithm returns true if true.
	Convert_n_bit_string_to_int: converts an n bit string representing an unsigned int to an int
	Convert_int_to_n_bit_string: converts an int to an unsigned representation of an int
	Reverse_bit_int: Converts an integer to a bit string, flips the bit string, then converts the integer back
	Create_G: Creates the unitary matrix G that corresponds to k iterations of Grover's algorithm for n qubits
	Create_circuit: Creates the qiskit circuit object that runs a grover's algrorithm iteration k times on the oracle function f for n qubits and a, the number of inputs x that evaluate to 1. Also returns the theoretical probability of success. 
	H_tensored: creates a numpy array that corresponds to a 2^n by 2^n Hadamard matrix
	All_f: creates all possible functions that return f(x)=1 for a given number of qubits n, and a, the number of inputs x that evaluate to 1
	Calc_lim: calculates how many iterations (k) of grovers algorithm should be ran to ensure it returns the correct value for a given number of qubits, and a, the number of inputs x that evaluate to 1
	Execute_Grover: executes the input qiskit circuit defintion num_shots times that runs a grover's algrorithm iteration k times on the oracle function f. Uses the simulator defined by back_end.



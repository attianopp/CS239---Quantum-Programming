# DJ
First, import the module dj.py

The function f: {0,1}^n --> {0,1} which is either constant or balanced, is taken as input in the form of a numpy array of length 2**n. Each element of f is an integer 0 or 1. The output of f corresponding to a bit string s is stored at f[d(s)], where d(s) corresponds to the decimal representation of string s. For example, for n=3, the value of f(011) will be stored at f[3], since the binary string 011 corresponds to the number 3.

All the code is organized in a class. First declare the class then to run:
There are three ways to implement the DJ algorithm:
1. (Recommended) For a high level implementation, call the function run(f). This function takes f as input, obtains the oracle Uf, creates and runs the circuit, and interprets the results. It runs by default on burlington. It returns the most frequent measurement.

>>> p = Program()
>>> counts, answer, assemble_time, run_time = p.run(f)
>>> print(answer)
# 0^n if f is constant
# ow f is balanced

2. For a lower level implementation, follow this sequence:
>>> p = Program()
>>> provider = IBMQ.enable_account(API_TOKEN)
>>> backend = provider.backends.ibmq_burlington
# create a gate from f
>>> uf = p.create_uf(n, f)
# build the dj circuit
>>> circuit = p.build_circuit(n, uf)
# measure the circuit h
>>> counts, assembly_time, run_time = p.measure(circuit, backend)
>>> print(counts)
# counts is a dictionary of counts of measurements

3. To get an aribitrary uf that runs on any machine
>>> p = Program()
>>> provider = IBMQ.enable_account(API_TOKEN)
>>> backend = provider.backends.ibmq_16_melbourne
>>> n = 10
>>> uf = p.get_uf(n, "constant0")
# f(x) = 0
>>> uf = p.get_uf(n, "constant1")
# f(x) = 0
>>> uf = p.get_uf(n, "balanced")
# f(x) is balanced
# build the dj circuit
>>> circuit = p.build_circuit(n, None, True, uf)
# measure the circuit h
>>> counts, assembly_time, run_time = p.measure(circuit, backend)
>>> print(counts)
# counts is a dictionary of counts of measurements

		
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# BV
First, import the module BV.py

The function f: {0,1}^n --> {0,1} which is satisfies f(x) = a . x + b, is taken as input in the form of a numpy array of length 2**n. Each element of f is an integer 0 or 1. The output of f corresponding to a bit string s is stored at f[d(s)], where d(s) corresponds to the decimal representation of string s. For example, for n=3, the value of f(011) will be stored at f[3], since the binary string 011 corresponds to the number 3.

There are three ways to implement the bv algorithm:
1. (Recommended) For a high level implementation, call the function run_BV(f). This function takes f as input, obtains the oracle Uf, creates and runs the circuit, and interprets the results. It returns the value of a as a string. Note the will call f(0) to determine b. It runs by default on burlington. It returns the most frequent measurement.

>>> p = Program()
>>> counts, answer, assemble_time, run_time = p.run(f)
>>> print(answer)
# prints (a,b) where f(x) = a . x + b

2. For a lower level implementation, follow this sequence:
>>> p = Program()
>>> provider = IBMQ.enable_account(API_TOKEN)
>>> backend = provider.backends.ibmq_burlington
# create a gate from f
>>> uf = p.create_uf(n, f)
# build the dj circuit
>>> circuit = p.build_circuit(n, uf)
# measure the circuit h
>>> counts, assembly_time, run_time = p.measure(circuit, backend)
>>> print(counts)
# counts is a dictionary of counts of measurements where each measurement represents a in reverse
>>> a = p.evaluate(counts)
# returns most frequent item
>>> b = f[0]

3. To get a simplified uf to run on any machine. Note this uses a hack where a, b are found classically and then used to build uf
>>> p = Program()
>>> provider = IBMQ.enable_account(API_TOKEN)
>>> backend = provider.backends.ibmq_16_melbourne
>>> n = 10
>>> uf = p.get_uf(n, f)
# build the dj circuit
>>> circuit = p.build_circuit(n, None, True, uf)
# measure the circuit h
>>> counts, assembly_time, run_time = p.measure(circuit, backend)
>>> print(counts)
# counts is a dictionary of counts of measurements
>>> a = p.evaluate(counts, False)
# returns most frequent item
>>> b = f[0]


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Simon's algorithm

[Note: We have included all the code we used to create all of the results and plots presented in the report. Please open the Simon.py file in an IDE to view it. The file is organized as follows: (i) Import libraries (ii) function definitions. (iii) Template for testing using the UF matrix method. (iv) Prompt 1 (n=1) (v) Prompt 1 (n=2)  (vi) Prompt 2  (vii) Prompt 3]


To use our functions, first, import the module Simon.py

The function f: {0,1}^n --> {0,1}^n which is satisfies f(x) = f(y) iff x + y \in {0,s} , is taken as input in the form of a numpy array of length 2**n. Each element of f is a string of length n. The output of f corresponding to a bit string s is stored at f[d(s)], where d(s) corresponds to the decimal representation of string s. For example, for n=3, the value of f(011) will be stored at f[3], since the binary string 011 corresponds to the number 3.

In order to implement our code, follow these steps:
>>> load_account()
In order to connect to IBM with your account credentials.
>>> device_backend, simulator_backend = get_backends(device_preference, n_qubits)
If device_preference is set to zero, then the least busy backend will be chosen. simulator_backend will also be set to be ibmq_qasm_simulator.

>>> Uf = create_Uf_matrix(f)
This will create the matrix corresponding to function f

>>> circ = get_Simon_circuit_from_matrix(Uf)
This will return a QuantumCircuit object, corresponding to Simon's circuit.

>>> get_transpiled_circ(circ, backend)
this will return a transpiled circuit with optimization_level set to 3 by default.

>>> job, result = run_created_circuit(circ, backend = device_backend, num_shots)
Executes a circuit on chosen backend

>>> counts = result.get_counts() 
>>> new_counts, dict_y = give_y_vals(counts)
Interprets the counts obtained by the quantum hardware, and returns a dictionary dict_y containing only y values.
(new_counts is useful only for debugging)
 
[Alternatively, 
>>> meas_filter, calib_job_id = get_meas_filter(num_qubits, backend, num_shots = 1024)
Created a filter that will be used for measurement error mitigation
	
>>> mitigated_results = meas_filter.apply(result)
The returned object has been processed to reduce measurement errors.

>>> mitigated_counts = mitigated_result.get_counts()
>>> _, mitigated_dict_y = give_y_vals(mitigated_counts)
Counts after doing error mitigation.
]

>>> list_s = s_solution(list(mitigated_dict_y ))
 Final output of Simon's algorithm

~~~~~~~~~~~~~~~~~~~~~~~~~~
As noted in the report, because the circuit depth is very large using this method, we recommend another method, which is based on directly creating the oracle by expressing it in terms of NOT, CNOT and SWAP gates. However, for this part, we require s, instead of f.
In order to implement this feature, replace the circuit preparation above by:
>>> circ, transpiled_circ = create_compact_circuit(s, device_backend)
s is a bit string of length n
Returns a circuit circ, and its transpiled output transpiled_circ. Note that s has been specified, and not f. The create_compact_circuit chooses a function f corresponding to s randomly, and creates the corresponding oracle, and assembles Simon's circuit.

After this point, the code remains as before.

It is possible to create circuits using this procedure for any s. Even for n=7, the transpiled circuit depth on average lies in the range of 10-20, making it possible to execute it on ibmq_16_melbourne.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Grover
grover is an object that contains all the relevant methods for Grover's algorithim as member functions
program is an object that runs grover on the IBM quantum hardware 
First, import the module grover.py

There are two ways to run the grover algorithm:

For a high level implementation, call the function program.run(f) to run on the quantum hardware, to run simulations use grover.run(f). This function takes f as input, obtains the oracle Uf, creates and runs the circuit, and interprets the results. It returns the value of the most frequent output measured from the quantum hardware.

>>> p = Program()
>>> counts, answer, assemble_time, run_time = p.run(f)
>>> print(answer)
# prints |x> such that f(x) == 1 

For a lower level implementation, follow this sequence:
>>> p = Program()
>>> provider = IBMQ.enable_account(API_TOKEN)
>>> backend = provider.backends.YOUR_FAVORITE_QC
# create a gate from f
>>> uf = p.create_uf(n, f)
# build the circuit
>>> circuit = p.build_circuit(n, uf)
# measure the circuit 
>>> counts, assembly_time, run_time = p.measure(circuit, backend)
>>> print(counts)
# counts is a dictionary of counts of measurements where each measurement represents |x> in reverse
>>> y = p.evaluate(counts)

